/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : T2
 **/
public class T2 extends Component implements IT2_p1, IT2_p2 {

@Override
public synchronized void m_via_p1(){
receive(mType.instantiate(p1_port), p1_port);
}

@Override
public synchronized void m_via_p2(){
receive(mType.instantiate(p2_port), p2_port);
}

//Attributes
//Ports
private Port p1_port;
private Port p2_port;
//Message types
protected final MMessageType mType = new MMessageType();
public MMessageType getMType(){
return mType;
}

//Empty Constructor
public T2() {
super();
}

//Constructor (all attributes)
public T2(String name) {
super(name);
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getP1_port() {
return p1_port;
}
public Port getP2_port() {
return p2_port;
}
private CompositeState buildT2_chart(){
final List<AtomicState> states_T2_chart = new ArrayList<AtomicState>();
final AtomicState state_T2_chart_Init = new AtomicState("Init")
{
@Override
public void onEntry() {
System.out.print("[T2] Init\n");
}

};
states_T2_chart.add(state_T2_chart_Init);
final List<Region> regions_T2_chart = new ArrayList<Region>();
final List<Handler> transitions_T2_chart = new ArrayList<Handler>();
transitions_T2_chart.add(new InternalTransition("706197430",mType, p1_port, state_T2_chart_Init){
@Override
public void doExecute(final Event e) {
final MMessageType.MMessage ce = (MMessageType.MMessage) e;
System.out.print("[T2] received p1?m\n");
}

});
transitions_T2_chart.add(new InternalTransition("473581465",mType, p2_port, state_T2_chart_Init){
@Override
public void doExecute(final Event e) {
final MMessageType.MMessage ce = (MMessageType.MMessage) e;
System.out.print("[T2] received p2?m\n");
}

});
final CompositeState state_T2_chart = new CompositeState("chart", states_T2_chart, state_T2_chart_Init, transitions_T2_chart, regions_T2_chart, false);
return state_T2_chart;
}

public Component buildBehavior() {
//Init ports
final List<EventType> inEvents_p1 = new ArrayList<EventType>();
final List<EventType> outEvents_p1 = new ArrayList<EventType>();
inEvents_p1.add(mType);
p1_port = new Port(PortType.REQUIRED, "p1", inEvents_p1, outEvents_p1, this);
final List<EventType> inEvents_p2 = new ArrayList<EventType>();
final List<EventType> outEvents_p2 = new ArrayList<EventType>();
inEvents_p2.add(mType);
p2_port = new Port(PortType.REQUIRED, "p2", inEvents_p2, outEvents_p2, this);
//Init state machine
behavior = buildT2_chart();
return this;
}

}
