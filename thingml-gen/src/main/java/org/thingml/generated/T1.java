/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : T1
 **/
public class T1 extends Component  {

private Collection<IT1_p1Client> p1_clients = Collections.synchronizedCollection(new LinkedList<IT1_p1Client>());
public synchronized void registerOnP1(IT1_p1Client client){
p1_clients.add(client);
}

public synchronized void unregisterFromP1(IT1_p1Client client){
p1_clients.remove(client);
}

private Collection<IT1_p2Client> p2_clients = Collections.synchronizedCollection(new LinkedList<IT1_p2Client>());
public synchronized void registerOnP2(IT1_p2Client client){
p2_clients.add(client);
}

public synchronized void unregisterFromP2(IT1_p2Client client){
p2_clients.remove(client);
}

private void sendM_via_p1(){
//ThingML send
p1_port.send(mType.instantiate(p1_port));
//send to other clients
for(IT1_p1Client client : p1_clients){
client.m_from_p1();
}}

private void sendM_via_p2(){
//ThingML send
p2_port.send(mType.instantiate(p2_port));
//send to other clients
for(IT1_p2Client client : p2_clients){
client.m_from_p2();
}}

//Attributes
//Ports
private Port p1_port;
private Port p2_port;
//Message types
protected final MMessageType mType = new MMessageType();
public MMessageType getMType(){
return mType;
}

//Empty Constructor
public T1() {
super();
}

//Constructor (all attributes)
public T1(String name) {
super(name);
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getP1_port() {
return p1_port;
}
public Port getP2_port() {
return p2_port;
}
private CompositeState buildT1_chart(){
final List<AtomicState> states_T1_chart = new ArrayList<AtomicState>();
final AtomicState state_T1_chart_Init = new AtomicState("Init")
{
@Override
public void onEntry() {
sendM_via_p1();
System.out.print("[T1] sent p1!m()\n");
sendM_via_p2();
System.out.print("[T1] sent p2!m()\n");
}

};
states_T1_chart.add(state_T1_chart_Init);
final List<Region> regions_T1_chart = new ArrayList<Region>();
final List<Handler> transitions_T1_chart = new ArrayList<Handler>();
final CompositeState state_T1_chart = new CompositeState("chart", states_T1_chart, state_T1_chart_Init, transitions_T1_chart, regions_T1_chart, false);
return state_T1_chart;
}

public Component buildBehavior() {
//Init ports
final List<EventType> inEvents_p1 = new ArrayList<EventType>();
final List<EventType> outEvents_p1 = new ArrayList<EventType>();
outEvents_p1.add(mType);
p1_port = new Port(PortType.PROVIDED, "p1", inEvents_p1, outEvents_p1, this);
final List<EventType> inEvents_p2 = new ArrayList<EventType>();
final List<EventType> outEvents_p2 = new ArrayList<EventType>();
outEvents_p2.add(mType);
p2_port = new Port(PortType.PROVIDED, "p2", inEvents_p2, outEvents_p2, this);
//Init state machine
behavior = buildT1_chart();
return this;
}

}
