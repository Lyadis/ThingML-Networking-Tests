
datatype UInt8<1> @c_type "uint8_t";

thing fragment PingPongMsgs {
	message ping(u : UInt8) @code "16";
	message pong() @code "165";
}

/*
thing PingServer includes PingPongMsgs {

	provided port ping_service {
		sends pong
		receives ping
	}

	statechart PongServerMachine init Active {

        on entry print "Ping Server Started!\n"

		state Active {
			
			internal event e : ping_service?ping
			action do
				print "ping: "
				print e.u
				print "\n"
				ping_service!pong()
			end
			
		}
	}
}*/

thing PingClient includes PingPongMsgs {

	required port ping_service {
		receives pong
		sends ping
	}
	
	statechart PingClientMachine init Ping {
	
	on entry print "Ping Client Started!\n"
	
		state Ping {
			
			on entry do
				print "Send Ping..." 
				ping_service!ping(255)
			end
				
			
			transition PONG -> Pong 
			event ping_service?pong
			
		}
		
		state Pong {
			on entry print "Got pong!\n"
			
			transition -> Stop
			
		}
		
		state Stop {
			on entry print "Bye.\n"
		}
		
	}
	
}

/**
Again, that simple ping pong application is fully platform-independent.
TODO: compile and run this configuration for the different platforms: C/Linux, Java, JavaScript and Arduino (if you have one)
@nlg "NoBufSerial"
@serial_start_byte "18"
@serial_stop_byte "19"
@serial_escape_byte "125"
*/
protocol Serial1
;
protocol Serial
@serial_path_to_device "/dev/ttyACM0"
;

configuration PingPongCfg 
@arduino_stdout "Serial"
{

	instance client: PingClient
	//instance server: PingServer

	connector client.ping_service over Serial
	//connector server.ping_service over Serial1

}
