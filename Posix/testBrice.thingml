datatype Int<4>

@type_checker "Integer"

@java_type "int"

@c_type "int32_t";

 

datatype Boolean<1>

@type_checker "Boolean"

@java_type "boolean"

@c_type "bool";

 

thing fragment API {

    message a()

    message b()

    message kill()

}

 

thing Controller includes API {

    required port p {

        sends a, b, kill

        receives a, b

    }

 

    property counter_t : Int = 0

    readonly property max_t : Int = 1000

    property killed : Boolean = 'false'

 

    statechart behavior init INIT {

 

        internal event p?a

        guard counter_t < max_t and not killed

        action do

            counter_t = counter_t + 1

            p!b()

        end

 

        internal event p?b

        guard counter_t < max_t and not killed

        action do

            counter_t = counter_t + 1

            p!a()

        end

 

        internal event p?a

        guard counter_t >= max_t and not killed

        action do

            p!kill()

            killed = 'true'

        end

 

        internal event p?b

        guard counter_t >= max_t and not killed

        action do

            p!kill()

            killed = 'true'

        end

 

        state INIT {}

    }

}

 

thing myThing includes API {

 

    message terminated()

    message started()

 

    provided port p {

        sends a, b

        receives a, b, kill

    }

 

    internal port sessionPort {

        sends terminated, started

        receives terminated, started

    }

 

    property nbSessions : Int = 0

    readonly property maxSessions : Int = 64

 

    property a : Int = 0

    property b : Int = 0

    property c : Int[8]

 

    function f1() do

        b = b + 1

        a = a - 1

    end

 

    function f2() do

        b = b - 1

        a = a + 1

    end

 

    statechart behavior init c {

 

        internal event sessionPort?terminated

        action nbSessions = nbSessions - 1

 

        internal event sessionPort?started

        action nbSessions = nbSessions + 1

 

        internal event p?kill

        action do

            print "The End.\n"

            print "a = "

            print a

            print "\n"

            print "b = "

            print b

            print "\n"

        end

 

        composite state c init c_2{

 

    on entry do

        f1()

        f2()

    end

 

    composite state c_0 init c_0_2{

 

    on entry do

        f1()

        f2()

    end

 

    state c_0_2 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_0_3

    event p?a

    action do

        //print "transition\n"

        f2()

 

    end

 

    transition -> c_0_6

    event p?b

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_0_3 {

 

    on entry do

        //print "entry\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_0_4

    action do

        //print "empty transition\n"

        f2()

 

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_0_4 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f1()

 

    end

 

        transition -> c_0_5

    event p?a

    action do

        //print "transition\n"

        f1()

 

    end

 

    transition -> c_0_2

    event p?b

    action do

        //print "transition\n"

        f2()

 

    end

 

}

state c_0_5 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_0_6

    action do

        //print "empty transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        f1()

 

    end

 

}

state c_0_6 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_0_2

    event p?a

    action do

        //print "transition\n"

        f2()

 

    end

 

    transition -> c_0_3

    event p?b

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

 

}

composite state c_1 init c_1_2{

 

    on entry do

        f1()

        f2()

    end

 

    state c_1_2 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f1()

 

    end

 

        transition -> c_1_3

    event p?a

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

    transition -> c_1_4

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

state c_1_3 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        f1()

 

    end

 

        transition -> c_1_4

    action do

        //print "empty transition\n"

        f2()

 

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_1_4 {

 

    on entry do

        //print "entry\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_1_5

    event p?a

    action do

        //print "transition\n"

        f2()

 

    end

 

    transition -> c_1_4

    event p?b

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_1_5 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_1_6

    action do

        //print "empty transition\n"

        f1()

 

        f2()

 

    end

 

}

state c_1_6 {

 

    on entry do

        //print "entry\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        f1()

 

    end

 

        transition -> c_1_2

    event p?a

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

    transition -> c_1_6

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

 

}

state c_2 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_3

    event p?a

    action do

        //print "transition\n"

        print "forking?"

if (nbSessions < maxSessions) do

    print "YES\n"

    fork c_s_1

end

 

    end

 

    transition -> c_4

    event p?b

    action do

        //print "transition\n"

        f2()

 

    end

 

}

state c_3 {

 

    on entry do

        //print "entry\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_4

    action do

        //print "empty transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        f1()

 

    end

 

}

state c_4 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_5

    event p?a

    action do

        //print "transition\n"

        print "forking?"

if (nbSessions < maxSessions) do

    print "YES\n"

    fork c_s_1

end

 

    end

 

    transition -> c_4

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

state c_5 {

 

    on entry do

        //print "entry\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_6

    action do

        //print "empty transition\n"

        f2()

 

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_6 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_2

    event p?a

    action do

        //print "transition\n"

        print "forking?"

if (nbSessions < maxSessions) do

    print "YES\n"

    fork c_s_0

end

 

    end

 

    transition -> c_2

    event p?b

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

session c_s_0 init START {

 

    composite state START init c_s_0_2 {

        on entry do

            print "session started\n"

            sessionPort!started()

        end

 

        internal event sessionPort?terminated

        action nbSessions = nbSessions - 1

 

        internal event sessionPort?started

        action nbSessions = nbSessions + 1

 

        state c_s_0_2 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_s_0_3

    event p?a

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

    transition -> c_s_0_4

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

state c_s_0_3 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f1()

 

    end

 

        transition -> c_s_0_4

    action do

        //print "empty transition\n"

        f2()

 

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_s_0_4 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_s_0_5

    event p?a

    action do

        //print "transition\n"

        f2()

 

    end

 

    transition -> c_s_0_5

    event p?b

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_s_0_5 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

       var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_s_0_6

    action do

        //print "empty transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        f1()

 

    end

 

}

state c_s_0_6 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> DIE

    event p?a

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

    transition -> c_s_0_3

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

 

 

        final state DIE {

            on entry print "session terminated\n"

        }

    }

}

session c_s_1 init START {

 

    composite state START init c_s_1_2 {

        on entry do

            print "session started\n"

            sessionPort!started()

        end

 

        internal event sessionPort?terminated

        action nbSessions = nbSessions - 1

 

        internal event sessionPort?started

        action nbSessions = nbSessions + 1

 

        state c_s_1_2 {

 

    on entry do

        //print "entry\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_s_1_3

    event p?a

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

    transition -> c_s_1_3

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

state c_s_1_3 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_s_1_4

    action do

        //print "empty transition\n"

        f1()

 

        f2()

 

    end

 

}

state c_s_1_4 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        f1()

 

    end

 

        transition -> c_s_1_5

    event p?a

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

    transition -> c_s_1_2

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

state c_s_1_5 {

 

    on entry do

        //print "entry\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_s_1_6

    action do

        //print "empty transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        f1()

 

    end

 

}

state c_s_1_6 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> DIE

    event p?a

    action do

        //print "transition\n"

        f2()

 

    end

 

    transition -> c_s_1_5

    event p?b

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

 

 

        final state DIE {

            on entry print "session terminated\n"

        }

    }

}

region c_r_0 init c_r_0_2{

 

    state c_r_0_2 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_r_0_3

    event p?a

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

    transition -> c_r_0_3

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

state c_r_0_3 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_r_0_4

    action do

        //print "empty transition\n"

        f2()

 

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_r_0_4 {

 

    on entry do

        //print "entry\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f1()

 

    end

 

        transition -> c_r_0_5

    event p?a

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

    transition -> c_r_0_5

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

state c_r_0_5 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_r_0_6

    action do

        //print "empty transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        f1()

 

    end

 

}

state c_r_0_6 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_r_0_2

    event p?a

    action do

        //print "transition\n"

        f1()

 

    end

 

    transition -> c_r_0_6

    event p?b

    action do

        //print "transition\n"

        f2()

 

    end

 

}

 

}

region c_r_1 init c_r_1_2{

 

    state c_r_1_2 {

 

    on entry do

        //print "entry\n"

        f1()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_r_1_3

    event p?a

    action do

        //print "transition\n"

        f2()

 

    end

 

    transition -> c_r_1_2

    event p?b

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_r_1_3 {

 

    on entry do

        //print "entry\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

        p!a()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_r_1_4

    action do

        //print "empty transition\n"

        f2()

 

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_r_1_4 {

 

    on entry do

        //print "entry\n"

        f2()

 

       p!a()

 

    end

 

    on exit do

        //print "exit\n"

        f1()

 

    end

 

        transition -> c_r_1_5

    event p?a

    action do

        //print "transition\n"

        f2()

 

    end

 

    transition -> c_r_1_4

    event p?b

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_r_1_5 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

        transition -> c_r_1_6

    action do

        //print "empty transition\n"

        f2()

 

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

}

state c_r_1_6 {

 

    on entry do

        //print "entry\n"

        f2()

 

        p!b()

 

    end

 

    on exit do

        //print "exit\n"

        f2()

 

    end

 

        transition -> c_r_1_2

    event p?a

    action do

        //print "transition\n"

        var i : Int = 0

while(i < 8) do

    c[i] = a + b

    i = i + 1

end

 

    end

 

    transition -> c_r_1_3

    event p?b

    action do

        //print "transition\n"

        f1()

 

    end

 

}

 

}

 

}

 

    }

 

}

 

configuration cfg {

    instance c : Controller

    instance t : myThing

 

    connector c.p => t.p

}

