/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PingServer
 **/
public class PingServer extends Component implements IPingServer_ping_service {

private Collection<IPingServer_ping_serviceClient> ping_service_clients = Collections.synchronizedCollection(new LinkedList<IPingServer_ping_serviceClient>());
public synchronized void registerOnPing_service(IPingServer_ping_serviceClient client){
ping_service_clients.add(client);
}

public synchronized void unregisterFromPing_service(IPingServer_ping_serviceClient client){
ping_service_clients.remove(client);
}

@Override
public synchronized void ping_via_ping_service(){
receive(pingType.instantiate(ping_service_port), ping_service_port);
}

private void sendPong_via_ping_service(){
//ThingML send
send(pongType.instantiate(ping_service_port), ping_service_port);
//send to other clients
for(IPingServer_ping_serviceClient client : ping_service_clients){
client.pong_from_ping_service();
}}

//Attributes
//Ports
private Port ping_service_port;
//Message types
protected final PingMessageType pingType = new PingMessageType();
public PingMessageType getPingType(){
return pingType;
}

protected final PongMessageType pongType = new PongMessageType();
public PongMessageType getPongType(){
return pongType;
}

//Empty Constructor
public PingServer() {
super(1);
}

//Constructor (all attributes)
public PingServer(String name) {
super(name, 1);
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getPing_service_port() {
return ping_service_port;
}
private CompositeState buildPingServer_PongServerMachine(){
final List<AtomicState> states_PingServer_PongServerMachine = new ArrayList<AtomicState>();
final AtomicState state_PingServer_PongServerMachine_Active = new AtomicState("Active")
;
states_PingServer_PongServerMachine.add(state_PingServer_PongServerMachine_Active);
final List<Region> regions_PingServer_PongServerMachine = new ArrayList<Region>();
final List<Handler> transitions_PingServer_PongServerMachine = new ArrayList<Handler>();
transitions_PingServer_PongServerMachine.add(new InternalTransition("503195940",pingType, ping_service_port, state_PingServer_PongServerMachine_Active){
@Override
public void doExecute(final Event e) {
final PingMessageType.PingMessage ce = (PingMessageType.PingMessage) e;
sendPong_via_ping_service();
System.out.println("Server received ping\n");
}

});
final CompositeState state_PingServer_PongServerMachine = new CompositeState("PongServerMachine", states_PingServer_PongServerMachine, state_PingServer_PongServerMachine_Active, transitions_PingServer_PongServerMachine, regions_PingServer_PongServerMachine, false){
@Override
public void onEntry() {
System.out.println("Ping Server Started!\n");
super.onEntry();
}

}
;
return state_PingServer_PongServerMachine;
}

public Component buildBehavior() {
//Init ports
final List<EventType> inEvents_ping_service = new ArrayList<EventType>();
final List<EventType> outEvents_ping_service = new ArrayList<EventType>();
inEvents_ping_service.add(pingType);
outEvents_ping_service.add(pongType);
ping_service_port = new Port(PortType.PROVIDED, "ping_service", inEvents_ping_service, outEvents_ping_service, 0);
//Init state machine
behavior = buildPingServer_PongServerMachine();
return this;
}

}
