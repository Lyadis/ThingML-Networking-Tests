/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PingClient
 **/
public class PingClient extends Component implements IPingClient_ping_service {

private Collection<IPingClient_ping_serviceClient> ping_service_clients = Collections.synchronizedCollection(new LinkedList<IPingClient_ping_serviceClient>());
public synchronized void registerOnPing_service(IPingClient_ping_serviceClient client){
ping_service_clients.add(client);
}

public synchronized void unregisterFromPing_service(IPingClient_ping_serviceClient client){
ping_service_clients.remove(client);
}

@Override
public synchronized void pong_via_ping_service(){
receive(pongType.instantiate(ping_service_port), ping_service_port);
}

private void sendPing_via_ping_service(){
//ThingML send
send(pingType.instantiate(ping_service_port), ping_service_port);
//send to other clients
for(IPingClient_ping_serviceClient client : ping_service_clients){
client.ping_from_ping_service();
}}

//Attributes
//Ports
private Port ping_service_port;
//Message types
protected final PingMessageType pingType = new PingMessageType();
public PingMessageType getPingType(){
return pingType;
}

protected final PongMessageType pongType = new PongMessageType();
public PongMessageType getPongType(){
return pongType;
}

//Empty Constructor
public PingClient() {
super(1);
}

//Constructor (all attributes)
public PingClient(String name) {
super(name, 1);
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getPing_service_port() {
return ping_service_port;
}
private CompositeState buildPingClient_PingClientMachine(){
final List<AtomicState> states_PingClient_PingClientMachine = new ArrayList<AtomicState>();
final AtomicState state_PingClient_PingClientMachine_Ping = new AtomicState("Ping")
{
@Override
public void onEntry() {
System.out.println("Send Ping...\n");
sendPing_via_ping_service();
}

};
states_PingClient_PingClientMachine.add(state_PingClient_PingClientMachine_Ping);
final AtomicState state_PingClient_PingClientMachine_Pong = new AtomicState("Pong")
{
@Override
public void onEntry() {
System.out.println("Got pong!\n");
}

};
states_PingClient_PingClientMachine.add(state_PingClient_PingClientMachine_Pong);
final AtomicState state_PingClient_PingClientMachine_Stop = new AtomicState("Stop")
{
@Override
public void onEntry() {
System.out.println("Bye.\n");
}

};
states_PingClient_PingClientMachine.add(state_PingClient_PingClientMachine_Stop);
final List<Region> regions_PingClient_PingClientMachine = new ArrayList<Region>();
final List<Handler> transitions_PingClient_PingClientMachine = new ArrayList<Handler>();
transitions_PingClient_PingClientMachine.add(new Transition("PONG",pongType, ping_service_port, state_PingClient_PingClientMachine_Ping, state_PingClient_PingClientMachine_Pong));
transitions_PingClient_PingClientMachine.add(new Transition("706197430", new NullEventType(), null, state_PingClient_PingClientMachine_Pong, state_PingClient_PingClientMachine_Stop));
final CompositeState state_PingClient_PingClientMachine = new CompositeState("PingClientMachine", states_PingClient_PingClientMachine, state_PingClient_PingClientMachine_Ping, transitions_PingClient_PingClientMachine, regions_PingClient_PingClientMachine, false){
@Override
public void onEntry() {
System.out.println("Ping Client Started!\n");
super.onEntry();
}

}
;
return state_PingClient_PingClientMachine;
}

public Component buildBehavior() {
//Init ports
final List<EventType> inEvents_ping_service = new ArrayList<EventType>();
final List<EventType> outEvents_ping_service = new ArrayList<EventType>();
inEvents_ping_service.add(pongType);
outEvents_ping_service.add(pingType);
ping_service_port = new Port(PortType.REQUIRED, "ping_service", inEvents_ping_service, outEvents_ping_service, 0);
//Init state machine
behavior = buildPingClient_PingClientMachine();
return this;
}

}
