import "../lib/_Datatypes.thingml"

thing Multiplexer includes Adafruit_RGBLCDShieldClient {
	required port netIO {
		sends button_press, button_release, button_long_press
		receives set_bgcolor
	}
	
	statechart myChart init Active {
		state Active {
			internal event e : buttons?button_press
			action netIO!button_press(e.but_id)
			internal event e : buttons?button_release
			action netIO!button_release(e.but_id)
			internal event e : buttons?button_long_press
			action netIO!button_long_press(e.but_id)

			internal event e : netIO?set_bgcolor
			action lcd!set_bgcolor(e.color)
		}
	}
}

thing fragment Adafruit_RGBLCDShieldClient includes Adafruit_RGBLCDShieldMsgs {

	required port buttons 
	{
		receives button_press, button_release, button_long_press
	}
	
	required port lcd 
	@sync_send "true" 
	{
		sends print_num, print_dec, print_str, clear, set_cursor, set_bgcolor
	}
	
}

thing fragment Adafruit_RGBLCDShieldMsgs {
	message 4ms_tick() @xms_tic "4" @code "100";

	message button_press(but_id : UInt8) @code "0";
	message button_release(but_id : UInt8) @code "1";
	message button_long_press(but_id : UInt8) @code "2";
	
	message set_bgcolor(color : UInt8) @code "3";
	message print_str(msg: String) @code "101";
	message print_dec(num: Double) @code "102";
    message print_num(num: Integer) @code "103";
	message clear() @code "104";
	message set_cursor(c : UInt8, l : UInt8) @code "105";
	
}

thing Adafruit_RGBLCDShield includes Adafruit_RGBLCDShieldMsgs
@c_header"
#include <Wire.h>
#include <Adafruit_RGBLCDShield.h>
#include <utility/Adafruit_MCP23017.h>
"
@c_global "
Adafruit_RGBLCDShield rgblcd = Adafruit_RGBLCDShield();
"
{

	required port clock {
		receives 4ms_tick
	}

	provided port buttons 
	@sync_send "false"
	{
		sends button_press, button_release, button_long_press
	}
	
	provided port lcd {
		receives print_num, print_dec, print_str, clear, set_cursor, set_bgcolor
	}	

	statechart RGBLCDShieldSM init ReadButtons {
		
		on entry do
			'rgblcd.begin(16, 2);'
			'rgblcd.setBacklight(0);'
		end
		
		internal event e : lcd?print_str action 'rgblcd.print('&e.msg&');'
		internal event e : lcd?print_num action 'rgblcd.print('&e.num&');'
        internal event e : lcd?print_dec action 'rgblcd.print('&e.num&');'
		internal event e : lcd?clear action 'rgblcd.clear();'
		internal event e : lcd?set_cursor action 'rgblcd.setCursor('&e.c&', '&e.l&');'
		internal event e : lcd?set_bgcolor action 'rgblcd.setBacklight('&e.color&');'
		
		state ReadButtons {
		
			property btime : UInt8[5]  // counters for the button status
			property bstate : UInt8[5]  // counters for the button status
			
			internal event clock?4ms_tick action do
				var button : UInt8 = 0
				while (button < 5) do
					if (bstate[button] > 0) btime[button] = btime[button] + 1
					button = button + 1
				end
			end
			
			transition -> ReadButtons action do
				var buttons : UInt8 = 'rgblcd.readButtons()'
				var button : UInt8 = 0
				while (button < 5) do
					var pressed : Boolean = '(1 << '&button&') & '&buttons&''
					if (pressed) do 
						if (bstate[button] == 0) do 
							buttons!button_press(button)
							btime[button] = 0 
						end
						bstate[button] = 1
						
						if (btime[button] > 250) do 
							buttons!button_long_press(button) 
							btime[button]=0 
						end
					end
					if (not pressed) do
						if (bstate[button] > 0) bstate[button] = bstate[button] + 1
						if (bstate[button] > 6) do
							buttons!button_release(button)
							bstate[button] = 0
						end
				  	end
				  	button = button + 1
				end
			end
		}
	}
}
