import "../lib/_Datatypes.thingml"

thing fragment Msgs {
	message mEmpty();
	message mChar(p : Char);
	message mBoolean(p : Boolean);
	message mUInt8(p : UInt8);
	message mUInt16(p : UInt16);
	message ready();
}

thing Sender includes Msgs
@trace_level "3" {
	required port myPort {
		receives ready
		sends  mEmpty, mChar, mBoolean, mUInt8, mUInt16
	}


	statechart SenderChart init Init {
		state Init {
			on entry do
				//print "[Sender] Ready\n"
			end
			transition -> Send_mEmtpy event myPort?ready
		}
		state Send_mEmtpy {
			on entry do
				myPort!mEmpty()
				//print "[Sender] sent mEmpty()\n"
			end
			
			transition -> Send_mChar
		}
		state Send_mChar {
			on entry do
				myPort!mChar('\'c\'')
				//print "[Sender] sent mChar('c')\n"
			end
			
			transition -> Send_mBoolean
		}
		state Send_mBoolean {
			on entry do
				myPort!mBoolean(true)
				//print "[Sender] sent mBoolean(true)\n"
			end
			
			transition -> Send_mUInt8
		}
		state Send_mUInt8 {
			on entry do
				myPort!mUInt8(255)
				//print "[Sender] sent mUInt8(255)\n"
			end
			
			transition -> Send_mUInt16
		}
		state Send_mUInt16 {
			on entry do
				myPort!mUInt16('0xFFFF')
				//print "[Sender] sent mUInt16(0xFFFF)\n"
				print "[Sender] Done\n"
			end
		}
	}
}

thing Receiver includes Msgs
@trace_level "3" {
	provided port myPort {
		sends ready
		receives mEmpty, mChar, mBoolean, mUInt8, mUInt16
	}


	statechart SenderChart init Init {
		state Init {
			on entry do
				//print "[Receiver] Ready\n"
				myPort!ready()
			end
		
		internal event e : myPort?mEmpty action do
				//print "[Receiver] received mEmpty "
				//print "\n"
			end
		internal event e : myPort?mChar action do
					//print "[Receiver] received mChar "
					//'Serial.print('& e.p &');'
					//print "\n"
				end
		internal event e : myPort?mBoolean action do
					//print "[Receiver] received mBoolean "
					//'Serial.print('& e.p &');'
					//print "\n"
				end
		internal event e : myPort?mUInt8 action do
					//print "[Receiver] received mUInt8 "
					//'Serial.print('& e.p &');'
					//print "\n"
				end
		internal event e : myPort?mUInt16 action do
					//print "[Receiver] received mUInt16 "
					//'Serial.print('& e.p &');'
					//print "\n"
				end
		
		}
	}
}

configuration Serialization_test_Cfg
@arduino_stdout "Serial"
@trace_level "3"
{
	instance s: Sender
	instance r : Receiver
	
	connector s.myPort => r.myPort
}
