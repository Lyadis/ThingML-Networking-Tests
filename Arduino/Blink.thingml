import "_Datatypes.thingml"

thing fragment TimerMsgs {
	message timer_start(id : UInt8, time : UInt32) @timer_start "true";
	message timer_cancel(id : UInt8) @timer_cancel "true";
	message timeout(id : UInt8) @timeout "true";
	message 250ms_tic() @xms_tic "250";
}

thing Blinker includes TimerMsgs {
	required port p {
		sends timer_start, timer_cancel
		receives timeout, 250ms_tic
	}
    property b1 : Boolean = false
    property b2 : Boolean = false
    property b3 : Boolean = false
	property led1 : UInt8 = 1
	property led2 : UInt8 = 2
	property led3 : UInt8 = 3
	statechart myChart init S1 {

		state S1{
			on entry do 
				'pinMode('&led1&', OUTPUT);'
				'pinMode('&led2&', OUTPUT);'
				'pinMode('&led3&', OUTPUT);'
				p!timer_start(0, 1000)
				p!timer_start(1, 1000)
				p!timer_start(2, 1500)
			end

			internal event e : p?timeout
			guard e.id == 0
			action do
				p!timer_start(0, 1000)
				if(b1) 'digitalWrite('&led1&', HIGH);'
				else 'digitalWrite('&led1&', LOW);'
				b1 = not b1
			end

			internal event e : p?timeout
			guard e.id == 1
			action do
				p!timer_start(1, 1000)
				if(b3) 'digitalWrite('&led3&', HIGH);'
				else 'digitalWrite('&led3&', LOW);'
				b3 = not b3
			end

			internal event e : p?timeout
			guard e.id == 2
			action do
				p!timer_start(2, 1500)
				p!timer_cancel(1)
				p!timer_start(1, 1000)
			end

			internal event e : p?250ms_tic action do
				if(b2) 'digitalWrite('&led2&', HIGH);'
				else 'digitalWrite('&led2&', LOW);'
				b2 = not b2
			end
		}
	}
}

protocol Timer @hardware_timer "0";

configuration testTimerCfg 
@arduino_stdout "Serial"
{
	instance b : Blinker
	connector b.p over Timer @hardware_timer "0"
}
