
import "../lib/_Datatypes.thingml"

configuration minCfg
@trace_level "3"
{
	instance test : ButtonController
	
	connector test.WS over MQTT
	@trace_level "3"
	@mqtt_broker_address "192.168.1.127"
}

thing fragment Msgs {
	message LEDControllerReady() @code "65";
	message LEDON() @code "66";
	message LEDOFF() @code "67";
}

thing fragment WSMsgs {
	message LEDisON(ClientID : UInt16) @code "101";
	message LEDisOFF(ClientID : UInt16) @code "102";
}

thing ButtonController includes Msgs, WSMsgs
@trace_level "3"
{
	
	required port LEDport {
		receives LEDON, LEDOFF, LEDControllerReady
		sends LEDON, LEDOFF, LEDControllerReady
	}
	
	required port WS {
		receives LEDON, LEDOFF, newClient, clientDC
		sends LEDisON, LEDisOFF
	}
	
	statechart LEDControllerChart init Init {
		state Init {
			on entry do
				'printf("[CPU] Init\n");'
			end
			transition -> Running
		}
		
		state Running {
			internal event LEDport?LEDON action do
				LEDport!LEDON()
				WS!LEDisON(-1)
				'printf("[CPU] LEDON\n");'
			end
			internal event LEDport?LEDOFF action do
				LEDport!LEDOFF()
				WS!LEDisOFF(-1)
				'printf("[CPU] LEDOFF\n");'
			end
			internal event WS?LEDON action do
				LEDport!LEDON()
				'printf("[CPU] WS LEDON\n");'
			end
			internal event WS?LEDOFF action do
				LEDport!LEDOFF()
				'printf("[CPU] WS LEDOFF\n");'
			end
			internal event e : WS?newClient action do
				WS!LEDisOFF(e.ClientID)
				'printf("[CPU] new Client: %i\n", '& e.ClientID &');'
			end
		}
	}
}

