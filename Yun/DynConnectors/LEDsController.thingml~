/*
 * File: HelloCPU.thingml
 * 
 * Description: This a simple test, its purpose is to check that cross compiling tools are working properly
 * 
 * TODO: Compile this ThingML into posix compatible code, and cross compile it with the arduino-yun-cross-compiler
 * 		 docker container, then upload the executable on the Yun (CPU side) and run it.
*/

import "../../lib/_Datatypes.thingml"
import "Msgs.thingml"

configuration LEDsControllerCfg
{
	instance lc : LEDsController
	instance bc : ButtonController
	instance b : Bridge
	
	connector lc.LEDport => b.LEDport
	connector bc.LEDport => b.LEDport
	connector b.Bridge over Serial1
	@port_name "Serial1"
	@serial_baudrate "115200"
	
}

thing Bridge includes Msgs {
	provided port LEDport {
		sends GreenON, GreenOFF, BlueON, BlueOFF
		receives UnoON, UnoOFF, DueON, DueOFF
	}
	provided port Bridge {
		receives GreenON, GreenOFF, BlueON, BlueOFF
		sends UnoON, UnoOFF, DueON, DueOFF
	}
	
	statechart BridgeChart init Active {
		state Active {
			internal event LEDport?UnoON action Bridge!UnoON()
			internal event LEDport?UnoOFF action Bridge!UnoOFF()

			internal event LEDport?DueON action Bridge!DueON()
			internal event LEDport?DueOFF action Bridge!DueOFF()

			internal event Bridge?GreenON action LEDport!GreenON()
			internal event Bridge?GreenOFF action LEDport!GreenOFF()

			internal event Bridge?BlueON action LEDport!BlueON()
			internal event Bridge?BlueOFF action LEDport!BlueOFF()
		}
	}
}

thing LEDsController includes Msgs {
	property BluePin : UInt8 = 7
	property GreenPin : UInt8 = 5
	
	required port LEDport {
		receives GreenON, GreenOFF, BlueON, BlueOFF
	}
	
	statechart LEDControllerChart init Init {
		state Init {
			transition -> Idle action do
				'pinMode('& BluePin &', OUTPUT);'
				'pinMode('& GreenPin &', OUTPUT);'
			end
		}
		
		state Idle {
			internal event LEDport?GreenON action do
				'digitalWrite('& GreenPin &', HIGH);'
			end
			
			internal event LEDport?GreenOFF action do
				'digitalWrite('& GreenPin &', LOW);'
			end

			internal event LEDport?GreenON action do
				'digitalWrite('& BluePin &', HIGH);'
			end
			
			internal event LEDport?GreenOFF action do
				'digitalWrite('& BluePin &', LOW);'
			end
		}
	}
}

thing ButtonController includes Msgs
{
	property UnoPin : UInt8 = 8
	property DuePin : UInt8 = 6
	
	property UnoIsPressed : Boolean = false
	property UnoON : Boolean = false
	
	property DueIsPressed : Boolean = false
	property DueON : Boolean = false
	
	

	required port LEDport {
		sends UnoON, UnoOFF, DueON, DueOFF
	}
	
	statechart LEDControllerChart init Init {
		state Init {
			on entry do
				'pinMode('& UnoPin &', INPUT);'
				'pinMode('& DuePin &', INPUT);'
			end
			transition -> Running
		}
		
		state Running {
			on entry do
				if (not(UnoIsPressed)) do
					UnoIsPressed = 'digitalRead(' & UnoPin & ')'
					if (UnoIsPressed) do
						if(UnoON) do
							LEDport!UnoOFF()
						end
						if(not(UnoON)) do
							LEDport!UnoON()
						end
						UnoON = not(UnoON)
					end
				end
				
				UnoIsPressed = 'digitalRead(' & UnoPin & ')'

				if (not(DueIsPressed)) do
					DueIsPressed = 'digitalRead(' & DuePin & ')'
					if (DueIsPressed) do
						if(DueON) do
							LEDport!DueOFF()
						end
						if(not(DueON)) do
							LEDport!DueON()
						end
						DueON = not(DueON)
					end
				end
				
				DueIsPressed = 'digitalRead(' & DuePin & ')'
				'delay(100);'
			end
			
			transition -> Running
		}
	}
}

